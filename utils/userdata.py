from datetime import datetime, timedelta
from typing import Dict, Any

CONFIG_DURATION_MINUTES = 2

_user_data: Dict[int, Dict[str, Any]] = {}


def mark_device_connected(user_id: int, device: str) -> None:
    """Mark device as connected and update expiry."""
    expires = datetime.utcnow() + timedelta(minutes=CONFIG_DURATION_MINUTES)
    info = _user_data.setdefault(user_id, {"phone": False, "computer": False, "expires_at": expires})
    info[device] = True
    info["expires_at"] = expires


def get_user_info(user_id: int) -> Dict[str, Any]:
    """Return stored info for user."""
    return _user_data.get(user_id, {"phone": False, "computer": False, "expires_at": None})

def plural(value: int, forms: tuple[str, str, str]) -> str:
    value = abs(value) % 100
    if 10 < value < 20:
        return forms[2]
    if value % 10 == 1:
        return forms[0]
    if 2 <= value % 10 <= 4:
        return forms[1]
    return forms[2]


def format_timedelta(td: timedelta) -> str:
    total_seconds = int(td.total_seconds())
    if total_seconds <= 0:
        return "0 —Å–µ–∫—É–Ω–¥"
    days, rem = divmod(total_seconds, 86400)
    hours, rem = divmod(rem, 3600)
    minutes, seconds = divmod(rem, 60)
    parts = []
    if days:
        parts.append(f"{days} {plural(days, ('–¥–µ–Ω—å','–¥–Ω—è','–¥–Ω–µ–π'))}")
    if hours:
        parts.append(f"{hours} {plural(hours, ('—á–∞—Å','—á–∞—Å–∞','—á–∞—Å–æ–≤'))}")
    if minutes:
        parts.append(f"{minutes} {plural(minutes, ('–º–∏–Ω—É—Ç–∞','–º–∏–Ω—É—Ç—ã','–º–∏–Ω—É—Ç'))}")
    if seconds and not days and not hours:
        parts.append(f"{seconds} {plural(seconds, ('—Å–µ–∫—É–Ω–¥–∞','—Å–µ–∫—É–Ω–¥—ã','—Å–µ–∫—É–Ω–¥'))}")
    return " ".join(parts)


def build_main_menu_text(user_id: int) -> str:
    info = get_user_info(user_id)
    expires = info.get("expires_at")
    if expires:
        time_left = expires - datetime.utcnow()
    else:
        time_left = timedelta(seconds=0)
    active = time_left.total_seconds() > 0
    phone_status = "–ü–æ–¥–∫–ª—é—á—ë–Ω" if info.get("phone") and active else "–ù–µ –ø–æ–¥–∫–ª—é—á—ë–Ω"
    pc_status = "–ü–æ–¥–∫–ª—é—á—ë–Ω" if info.get("computer") and active else "–ù–µ –ø–æ–¥–∫–ª—é—á—ë–Ω"
    time_text = format_timedelta(time_left) if active else "0 —Å–µ–∫—É–Ω–¥"
    return (
        "üëã <b>–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –∏ –ø–æ–¥–ø–∏—Å–∫–µ</b>\n\n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É —Ç–µ–±—è –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∏ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏."\n\n"
        "üßæ <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω</b> ‚Äî {phone_status}\n"
        f"<b>–ö–æ–º–ø—å—é—Ç–µ—Ä</b> ‚Äî {pc_status}\n\n"
        f"üïí <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞:</b> {time_text}\n"
        "üéÅ <b>–ë–æ–Ω—É—Å:</b> +7 –¥–Ω–µ–π –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!"
    )
